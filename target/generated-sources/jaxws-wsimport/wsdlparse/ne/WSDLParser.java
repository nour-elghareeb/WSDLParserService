
package wsdlparse.ne;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.8
 * Generated source version: 2.2
 * 
 */
@WebService(name = "WSDLParser", targetNamespace = "ne.wsdlparse")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
@XmlSeeAlso({
    ObjectFactory.class
})
public interface WSDLParser {


    /**
     * 
     * @param parameters
     * @return
     *     returns wsdlparse.ne.UploadWSDLResponse
     * @throws WSDLParserFault
     */
    @WebMethod(operationName = "UploadWSDL", action = "ne.wsdlparse/UploadWSDL")
    @WebResult(name = "UploadWSDLResponse", targetNamespace = "ne.wsdlparse", partName = "parameters")
    public UploadWSDLResponse uploadWSDL(
        @WebParam(name = "UploadWSDLRequest", targetNamespace = "ne.wsdlparse", partName = "parameters")
        UploadWSDLRequest parameters)
        throws WSDLParserFault
    ;

    /**
     * 
     * @param parameters
     * @return
     *     returns wsdlparse.ne.ListServicesResponse
     * @throws WSDLParserFault
     */
    @WebMethod(operationName = "ListServices", action = "ne.wsdlparse/ListServices")
    @WebResult(name = "ListServicesResponse", targetNamespace = "ne.wsdlparse", partName = "parameters")
    public ListServicesResponse listServices(
        @WebParam(name = "ListServicesRequest", targetNamespace = "ne.wsdlparse", partName = "parameters")
        ListServicesRequest parameters)
        throws WSDLParserFault
    ;

    /**
     * 
     * @param parameters
     * @return
     *     returns wsdlparse.ne.ListAvailableWSDLsResponse
     * @throws WSDLParserFault
     */
    @WebMethod(operationName = "ListAvailableWSDLs", action = "ne.wsdlparse/ListAvailableWSDLs")
    @WebResult(name = "ListAvailableWSDLsResponse", targetNamespace = "ne.wsdlparse", partName = "parameters")
    public ListAvailableWSDLsResponse listAvailableWSDLs(
        @WebParam(name = "ListAvailableWSDLsRequest", targetNamespace = "ne.wsdlparse", partName = "parameters")
        ListAvailableWSDLsRequest parameters)
        throws WSDLParserFault
    ;

    /**
     * 
     * @param parameters
     * @return
     *     returns wsdlparse.ne.FilterAvailableWSDLsResponse
     * @throws WSDLParserFault
     */
    @WebMethod(operationName = "FilterAvailableWSDLs", action = "ne.wsdlparse/FilterAvailableWSDLs")
    @WebResult(name = "FilterAvailableWSDLsResponse", targetNamespace = "ne.wsdlparse", partName = "parameters")
    public FilterAvailableWSDLsResponse filterAvailableWSDLs(
        @WebParam(name = "FilterAvailableWSDLsRequest", targetNamespace = "ne.wsdlparse", partName = "parameters")
        FilterAvailableWSDLsRequest parameters)
        throws WSDLParserFault
    ;

    /**
     * 
     * @param parameters
     * @return
     *     returns wsdlparse.ne.ListServicePortsResponse
     * @throws WSDLParserFault
     */
    @WebMethod(operationName = "ListServicePorts", action = "ne.wsdlparse/ListServicePorts")
    @WebResult(name = "ListServicePortsResponse", targetNamespace = "ne.wsdlparse", partName = "parameters")
    public ListServicePortsResponse listServicePorts(
        @WebParam(name = "ListServicePortsRequest", targetNamespace = "ne.wsdlparse", partName = "parameters")
        ListServicePortsRequest parameters)
        throws WSDLParserFault
    ;

    /**
     * 
     * @param parameters
     * @return
     *     returns wsdlparse.ne.ListPortOperationsResponse
     * @throws WSDLParserFault
     */
    @WebMethod(operationName = "ListPortOperations", action = "ne.wsdlparse/ListPortOperations")
    @WebResult(name = "ListPortOperationsResponse", targetNamespace = "ne.wsdlparse", partName = "parameters")
    public ListPortOperationsResponse listPortOperations(
        @WebParam(name = "ListPortOperationsRequest", targetNamespace = "ne.wsdlparse", partName = "parameters")
        ListPortOperationsRequest parameters)
        throws WSDLParserFault
    ;

    /**
     * 
     * @param parameters
     * @return
     *     returns wsdlparse.ne.ListOperationMessagesResponse
     * @throws WSDLParserFault
     */
    @WebMethod(operationName = "ListOperationMessages", action = "ne.wsdlparse/ListOperationMessages")
    @WebResult(name = "ListOperationMessagesResponse", targetNamespace = "ne.wsdlparse", partName = "parameters")
    public ListOperationMessagesResponse listOperationMessages(
        @WebParam(name = "ListOperationMessagesRequest", targetNamespace = "ne.wsdlparse", partName = "parameters")
        ListOperationMessagesRequest parameters)
        throws WSDLParserFault
    ;

    /**
     * 
     * @param parameters
     * @return
     *     returns wsdlparse.ne.GenerateMessageESQLResponse
     * @throws WSDLParserFault
     */
    @WebMethod(operationName = "GenerateMessageESQL", action = "ne.wsdlparse/GenerateMessageESQL")
    @WebResult(name = "GenerateMessageESQLResponse", targetNamespace = "ne.wsdlparse", partName = "parameters")
    public GenerateMessageESQLResponse generateMessageESQL(
        @WebParam(name = "GenerateMessageESQLRequest", targetNamespace = "ne.wsdlparse", partName = "parameters")
        GenerateMessageESQLRequest parameters)
        throws WSDLParserFault
    ;

    /**
     * 
     * @param parameters
     * @return
     *     returns wsdlparse.ne.DeleteWSDLResponse
     * @throws WSDLParserFault
     */
    @WebMethod(operationName = "DeleteWSDL", action = "ne.wsdlparse/DeleteWSDL")
    @WebResult(name = "DeleteWSDLResponse", targetNamespace = "ne.wsdlparse", partName = "parameters")
    public DeleteWSDLResponse deleteWSDL(
        @WebParam(name = "DeleteWSDLRequest", targetNamespace = "ne.wsdlparse", partName = "parameters")
        DeleteWSDLRequest parameters)
        throws WSDLParserFault
    ;

}
